<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Visualization on the stupidest thing...</title>
    <link>/tags/data-visualization/</link>
    <description>Recent content in Data Visualization on the stupidest thing...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>The text in this work is licensed under CC-BY-4.0, https://creativecommons.org/licenses/by/4.0/legalcode; code licensed under the MIT License</copyright>
    <lastBuildDate>Thu, 11 May 2017 16:22:00 -0500</lastBuildDate>
    <atom:link href="/tags/data-visualization/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>updating d3panels and R/qtlcharts for D3 version 4</title>
      <link>/2017/05/11/updating-d3panels-and-r/qtlcharts-for-d3-version-4/</link>
      <pubDate>Thu, 11 May 2017 16:22:00 -0500</pubDate>
      
      <guid>/2017/05/11/updating-d3panels-and-r/qtlcharts-for-d3-version-4/</guid>
      <description>&lt;p&gt;I just spent some time updating my &lt;a href=&#34;http://kbroman.org/d3panels&#34;&gt;d3panels&lt;/a&gt; library and &lt;a href=&#34;http://kbroman.org/qtlcharts&#34;&gt;R/qtlcharts&lt;/a&gt; package for &lt;a href=&#34;https://d3js.org&#34;&gt;D3&lt;/a&gt; &lt;a href=&#34;https://github.com/d3/d3/blob/master/API.md&#34;&gt;version 4&lt;/a&gt;. It took just about a day, and the majority of the time was spent puzzling over &lt;a href=&#34;https://github.com/d3/d3/blob/master/API.md#forces-d3-force&#34;&gt;d3-force&lt;/a&gt; and &lt;a href=&#34;https://github.com/d3/d3/blob/master/API.md#brushes-d3-brush&#34;&gt;d3-brush&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(Note that I just barely know what I’m doing, by which I mean I &lt;em&gt;don’t&lt;/em&gt; know what I’m doing. I’m able to get things to work, but I don’t always know why.)&lt;/p&gt;
&lt;p&gt;I was very glad that I’d written a bunch of tests, because I could use those to figure out what was working and what was not working, and whether my changes were effective. &lt;em&gt;Tests, test, tests.&lt;/em&gt; There’s nothing better than tests for this sort of refactoring business.&lt;/p&gt;
&lt;p&gt;I like the changes in D3 version 4, but trying to figure them out feels a bit like being back in 2012, when I was first trying to understand D3: I’ve not found many tutorials that explain how to use the new version, so I mostly focused on reading the &lt;a href=&#34;https://github.com/d3/d3/blob/master/API.md&#34;&gt;API documentation&lt;/a&gt;, which isn’t easy for me to understand, or to walk through the code for some of [Michael Bostock]’s &lt;a href=&#34;https://bl.ocks.org/mbostock&#34;&gt;examples&lt;/a&gt;. There are loads of books and tutorials on D3, but they’re almost all still talking about D3 version 3. (This will change shortly. For example, the 2nd edition of &lt;a href=&#34;http://alignedleft.com/&#34;&gt;Scott Murray&lt;/a&gt;’s excellent &lt;a href=&#34;http://shop.oreilly.com/product/0636920037316.do&#34;&gt;Interactive Data Visualization for the Web&lt;/a&gt; is at the printer, and covers D3 version 4.)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ireneros.com/&#34;&gt;Irene Ros&lt;/a&gt;’s &lt;a href=&#34;https://iros.github.io/d3-v4-whats-new/#1&#34;&gt;slides on what’s new in D3 V4&lt;/a&gt; were super helpful. (Also I just saw &lt;a href=&#34;http://www.puzzlr.org/sample-page/&#34;&gt;Tom Roth&lt;/a&gt;’s nice &lt;a href=&#34;http://www.puzzlr.org/force-graphs-with-d3/&#34;&gt;tutorial on d3-force&lt;/a&gt;, linked on the &lt;a href=&#34;https://github.com/d3/d3/wiki/Tutorials&#34;&gt;D3 tutorials page&lt;/a&gt;; duh.)&lt;/p&gt;
&lt;p&gt;My D3 code isn’t particularly fancy. (And note that I’m still writing in &lt;a href=&#34;http://coffeescript.org&#34;&gt;CoffeeScript&lt;/a&gt;; I toyed with the idea of switching to &lt;a href=&#34;https://www.ecma-international.org/ecma-262/6.0/&#34;&gt;ES6&lt;/a&gt;, particularly because we can now use &lt;code&gt;(d) =&amp;gt; d.x&lt;/code&gt;. But I love CoffeeScript and don’t want to lose list comprehensions, and actually my favorite thing is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;some_option = chartOpts?.some_option ? the_default&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I do fight with the indentation at times, but I’ve grown accustomed to it.&lt;/p&gt;
&lt;p&gt;Anyway, back to the point of this: what did I have to change to get &lt;a href=&#34;http://kbroman.org/d3panels&#34;&gt;d3panels&lt;/a&gt; and &lt;a href=&#34;https://kbroman.org/qtlcharts&#34;&gt;R/qtlcharts&lt;/a&gt; to work with D3 version 4?&lt;/p&gt;
&lt;div id=&#34;simple-replacements&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simple replacements&lt;/h2&gt;
&lt;p&gt;The bulk of the changes were simple replacements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d3.scale.linear()&lt;/code&gt; → &lt;code&gt;d3.scaleLinear()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d3.svg.line()&lt;/code&gt; → &lt;code&gt;d3.line()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d3.scale.category20().range()&lt;/code&gt; → &lt;code&gt;d3.schemeCategory20&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d3.random.normal(10,3)&lt;/code&gt; → &lt;code&gt;d3.randomNormal(10,3)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slightly more tricky: &lt;code&gt;d3.scale.ordinal().rangeBands([0,w],0,0)&lt;/code&gt; became &lt;code&gt;d3.scaleBand().range([0,w])&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, I had written (well, borrowed from somewhere) methods &lt;code&gt;.moveToFront()&lt;/code&gt; and &lt;code&gt;.moveToBack()&lt;/code&gt;, which I can omit as D3 version 4 has &lt;code&gt;.raise()&lt;/code&gt; and &lt;code&gt;.lower()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So really, the majority of the changes were made by for &lt;code&gt;d3.&lt;/code&gt;, making some tiny edit, and then seeing if my tests were working.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;d3-force&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;a href=&#34;https://github.com/d3/d3/blob/master/API.md#forces-d3-force&#34;&gt;d3-force&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My D3 code is rather primitive. I’m basically just drawing and then adding some &lt;code&gt;.on(&amp;quot;mouseover&amp;quot;, something)&lt;/code&gt; or &lt;code&gt;.on(&amp;quot;click&amp;quot;, something_else)&lt;/code&gt; for interactivity.&lt;/p&gt;
&lt;p&gt;But force-directed graphics are pretty awesome, particularly for &lt;a href=&#34;http://www.cbs.dtu.dk/~eklund/beeswarm/&#34;&gt;beeswarm&lt;/a&gt;-type plots, so I did make use of &lt;code&gt;d3.layout.force&lt;/code&gt; in two places.&lt;/p&gt;
&lt;p&gt;But I didn’t really know what I was doing before, and that made the change to &lt;code&gt;d3.forceSimulation&lt;/code&gt; a bit more puzzling. My &lt;a href=&#34;https://github.com/kbroman/d3panels/blob/1.1.4/src/dotchart.coffee#L181-L246&#34;&gt;code implementing a beeswarm-type dot chart&lt;/a&gt; is really ugly and so not worth looking at or discussing. The &lt;a href=&#34;https://github.com/kbroman/d3panels/blob/master/src/dotchart.coffee#L181-L201&#34;&gt;new version&lt;/a&gt; is just 21 lines (vs 65 lines before), and way easier to read.&lt;/p&gt;
&lt;p&gt;For &lt;a href=&#34;http://kbroman.org/d3panels/assets/test/dotchart/&#34;&gt;&lt;code&gt;d3panels.dotchart&lt;/code&gt;&lt;/a&gt;, the main bit looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;d3.range(scaledPoints.length).map( (i) -&amp;gt;
    scaledPoints[i].fy = scaledPoints[i].y)

force = d3.forceSimulation(scaledPoints)
      .force(&amp;quot;x&amp;quot;, d3.forceX((d) -&amp;gt; d.x))
      .force(&amp;quot;collide&amp;quot;, d3.forceCollide(pointsize*1.1))
      .on(&amp;quot;tick&amp;quot;, ticked)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have a data set &lt;code&gt;scaledPoints&lt;/code&gt; which is an array of objects with &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values for point locations. I add &lt;code&gt;.fy&lt;/code&gt; to each element of the array, to prevent the &lt;code&gt;y&lt;/code&gt; values from being changed. (This is a beeswarm-type chart where the x-axis is a category, and I want those values to be dynamically adjusted using &lt;em&gt;the force&lt;/em&gt;, but the y-axis is the quantitative value, and I don’t want those values to change.)&lt;/p&gt;
&lt;p&gt;Next I use &lt;code&gt;d3.forceSimulation&lt;/code&gt;, pass in my data, and then add a force that makes the points want to go towards their x value another another force that makes them not collide with each other.&lt;/p&gt;
&lt;p&gt;Finally, I have the &lt;code&gt;ticked&lt;/code&gt; function that does the updating of the point locations.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ticked = () -&amp;gt;
    points.attr(&amp;quot;cx&amp;quot;, (d) -&amp;gt; d.x)
          .attr(&amp;quot;cy&amp;quot;, (d) -&amp;gt; d.y)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s that. There’s a bit more code since I want the option of having the opposite orientation, with the categories on the y-axis and the quantitative values on the x-axis, but really it’s just those 9 lines of code plus a couple of blank lines.&lt;/p&gt;
&lt;p&gt;It was hard work figuring them out, but only because I was spending too much time hacking away without understanding, rather than trying to come to some understanding before doing any hacking.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;d3-brush&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;a href=&#34;https://github.com/d3/d3/blob/master/API.md#brushes-d3-brush&#34;&gt;d3-brush&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The last major thing I had to figure out was d3-brush. I’ve not implemented any actual brushing in either &lt;a href=&#34;http://kbroman.org/d3panels&#34;&gt;d3panels&lt;/a&gt; or &lt;a href=&#34;http://kbroman.org/qtlcharts&#34;&gt;R/qtlcharts&lt;/a&gt;, but I did use &lt;code&gt;d3.svg.brush&lt;/code&gt; in one my tests of &lt;a href=&#34;http://kbroman.org/d3panels/assets/test/scatterplot/&#34;&gt;&lt;code&gt;d3panels.scatterplot&lt;/code&gt;&lt;/a&gt;, to show that it could be done.&lt;/p&gt;
&lt;p&gt;In my &lt;a href=&#34;https://github.com/kbroman/d3panels/blob/1.1.4/test/scatterplot/test_scatterplot.coffee#L66-L99&#34;&gt;original brush code&lt;/a&gt;, which was applied for a matrix of three scatterplots, I was creating a separate brush for each of the three scatterplots. And with the old &lt;code&gt;d3.svg.brush()&lt;/code&gt;, you’d pass x- and y-axis scales with &lt;code&gt;.x()&lt;/code&gt; and &lt;code&gt;.y()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You don’t pass scales to the new &lt;code&gt;d3.brush()&lt;/code&gt;. Instead, you use &lt;code&gt;d3.event.selection&lt;/code&gt; to grab the current selection in screen coordinates and then have to convert them back to plot coordinates with your scales’ inverses.&lt;/p&gt;
&lt;p&gt;But I revised my code to what I thought should be working, and which was actually working for the first of the three scatterplots, but I got cryptic errors if I tried to brush the other two scatterplots. And so finally, in the &lt;a href=&#34;https://github.com/kbroman/d3panels/blob/master/test/scatterplot/test_scatterplot.coffee#L66-L102&#34;&gt;revised code&lt;/a&gt;, I decided to use a single brush that was applied across the three scatterplots. (It seems that you &lt;a href=&#34;http://bl.ocks.org/ludwigschubert/0236fa8594c4b02711b2606a8f95f605&#34;&gt;can implement multiple brushes&lt;/a&gt;, but it’s complicated.) The single-brush solution is perfectly fine for my test case, and actually it’s maybe easier to understand.&lt;/p&gt;
&lt;p&gt;So the conversion from &lt;code&gt;d3.svg.brush&lt;/code&gt; to &lt;code&gt;d3.brush&lt;/code&gt; was really pretty easy. I needed to abandon the multiple brushes, and then the back-calculation from screen coordinates to plot coordinates is slightly tedious but not a big deal.&lt;/p&gt;
&lt;p&gt;So that was the last thing, and I now have both &lt;a href=&#34;http://kbroman.org/d3panels&#34;&gt;d3panels&lt;/a&gt; and &lt;a href=&#34;http://kbroman.org/qtlcharts&#34;&gt;R/qtlcharts&lt;/a&gt; working for &lt;a href=&#34;https://d3js.org&#34;&gt;D3&lt;/a&gt; version 4.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;whats-the-point&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What’s the point?&lt;/h2&gt;
&lt;p&gt;The point of all this is that I have ideas for further plots I want to make in &lt;a href=&#34;http://kbroman.org/qtlcharts&#34;&gt;R/qtlcharts&lt;/a&gt;, such as a tool for exploring pleiotropy (that is, whether two traits are affected by a common genetic locus, or instead are each controlled by separate but closely linked loci). For that thing, I wanted a double-slider, and it seemed best to implement it using D3 version 4, &lt;a href=&#34;https://www.biostat.wisc.edu/~kbroman/D3/d3doubleslider/&#34;&gt;which I did&lt;/a&gt;. But I want to use my slider with &lt;a href=&#34;http://kbroman.org/d3panels&#34;&gt;d3panels&lt;/a&gt;, and really I want to incorporate it into &lt;a href=&#34;http://kbroman.org/qtlcharts&#34;&gt;R/qtlcharts&lt;/a&gt;, so it was clear that I needed to spend some time refactoring.&lt;/p&gt;
&lt;p&gt;And actually, I was surprised at how easy it was. (I thought it would be considerably more than a day’s work.) And I feel like I now kind of understand d3-force and d3-brush, so the effort involved was definitely worthwhile.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>crayon colors, simplified</title>
      <link>/2017/05/02/crayon-colors-simplified/</link>
      <pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/05/02/crayon-colors-simplified/</guid>
      <description>&lt;p&gt;Back in 2014, I’d grabbed the &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors&#34;&gt;Crayola crayon colors from Wikipedia&lt;/a&gt; and made them available as part of my &lt;a href=&#34;https://github.com/kbroman/broman&#34;&gt;R/broman&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;(I &lt;a href=&#34;http://kbroman.org/blog/2014/05/07/crayon-colors-in-r/&#34;&gt;wrote about it on previously&lt;/a&gt;, and then &lt;a href=&#34;http://kbroman.org/blog/2014/05/08/two-more-points-about-crayon-colors/&#34;&gt;again&lt;/a&gt; and &lt;a href=&#34;http://kbroman.org/blog/2014/05/09/further-points-on-crayon-colors/&#34;&gt;again&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;But using my package to get the crayon colors can be rather tedious.&lt;/p&gt;
&lt;p&gt;It’s easy to view the available colors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(broman)
plot_crayons()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-05-02-crayon-colors-simplified_files/figure-html/plot_crayons-1.png&#34; width=&#34;700&#34; /&gt;&lt;/p&gt;
&lt;p&gt;But grabbing a color, say “Purple Mountain’s Majesty”, requires rather verbose code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;brocolors(&amp;quot;crayons&amp;quot;)[&amp;quot;Purple Mountain&amp;#39;s Majesty&amp;quot;]
## Purple Mountain&amp;#39;s Majesty 
##                 &amp;quot;#9d81ba&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This morning, it was just too much for me. So I wrote a simpler function &lt;code&gt;crayons()&lt;/code&gt;, which accepts partial matches, using &lt;code&gt;grep&lt;/code&gt;. So you can write things like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crayons(&amp;quot;purple m&amp;quot;)
## Purple Mountain&amp;#39;s Majesty 
##                 &amp;quot;#9d81ba&amp;quot;
crayons(&amp;quot;tickle&amp;quot;)
## Tickle Me Pink 
##      &amp;quot;#fc89ac&amp;quot;
crayons(c(&amp;quot;purple m&amp;quot;, &amp;quot;tickle&amp;quot;))
## Purple Mountain&amp;#39;s Majesty            Tickle Me Pink 
##                 &amp;quot;#9d81ba&amp;quot;                 &amp;quot;#fc89ac&amp;quot;
crayons(&amp;quot;purple m&amp;quot;, &amp;quot;tickle&amp;quot;)
## Purple Mountain&amp;#39;s Majesty            Tickle Me Pink 
##                 &amp;quot;#9d81ba&amp;quot;                 &amp;quot;#fc89ac&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why didn’t I think of this before?&lt;/p&gt;
&lt;p&gt;The new version of the package is not yet on &lt;a href=&#34;https://cran.r-project.org&#34;&gt;CRAN&lt;/a&gt;, but you can install it from &lt;a href=&#34;https://github.com/kbroman/broman&#34;&gt;GitHub&lt;/a&gt; using &lt;a href=&#34;https://github.com/hadley/devtools&#34;&gt;devtools&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;quot;kbroman/broman&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can ignore the rest of the package and just &lt;a href=&#34;https://github.com/kbroman/broman/blob/master/R/brocolors.R&#34;&gt;grab the code&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
